							Encapsulate Collection
											
											
1.Encapsulate Collection【封装集合】

		提供了一种向类的使用者（客户端）隐藏类中集合的方法，既可以让客户类能够访问到集合中的元素，
		
但是又不让客户类直接修改集合的内容



===============================================================================================		
		实例：
		
			class Order {  
					
					private double orderTotal; //订单总金额  
					private Collectio<Integer> orderItems; //集合对象，存储一个订单中的所有订单项  
      
				public Order() {  
					this.orderItems = new ArrayList<Integer>();  
				}  
      
				//返回订单项集合  
				public Collection<Integer> getOrderItems() {  
					return this.orderItems;  
				}  
      
				//返回订单总金额  
				public double getOrderTotal() {  
					return this.orderTotal;  
				}  
      
				//增加订单项，同时增加订单总金额  
				public void addOrderItem(OrderItem orderItem) {  
					this.orderTotal += orderItem.getTotalPrice();  
					orderItems.add(orderItem);  
				}  
			}			  
  

  
				class Client {  
				
				public static void main(String args[]) {  
					Integer orderItem1 = new Integer(116.00);  
					Integer orderItem2 = new Integer(234.00);  
          
					Order order = new Order();  
					order.addOrderItem(orderItem1);  
					order.addOrderItem(orderItem2);  
          
				//获取订单类中的订单项集合  
				Collection<Integer> orderItems = order.getOrderItems();  
          
				System.out.print("订单中各订单项的价格分别为：");  
			for (Integer obj : orderItems) {  
				System.out.print(obj+ ",");  
			}  
			System.out.println("订单总金额为" + order.getOrderTotal());  
  
					//【通过订单项集合对象的add()方法增加新订单】  
					orderItems.add(new OrderItem(100.00));  
          
				System.out.print("订单中各订单项的价格分别为：");  
			for (Integer obj : orderItems) {  
				System.out.print(obj + ",");  
			}  
			System.out.println("增加新项后订单总金额为" + order.getOrderTotal());  
			
			}  
			
==================================================================================
订单中各订单项的价格分别为：116.0,234.0,订单总金额为350.0
订单中各订单项的价格分别为：116.0,234.0,100.0,增加新项后订单总金额为450.0
==================================================================================
			分析：
			
				因为返回了Collection类型的订单项集合对象orderItems，可以直接使用在Collection接口中
				
声明的add()方法来增加元素，而绕过了在Order类的addOrderItem()方法中统计订单总金额的代码，导致订单项

增加成功，但是总金额并没有变化。



----------------------------------------解决方案（1）--------------------------------------

		将Collection改成Iterable，因为在java.lang. Iterable接口中只提供了一个返回迭代器Iterator对
		
象的iterator()方法，没有提供add()、remove()等修改成员的方法。因此，只能遍历集合中的元素




----------------------------------------解决方案（2）--------------------------------------

		将getOrderItemsIterator()方法的返回类型改为Iterator<Integer>，不直接返回集合对象，而是返
		
回遍历集合对象的迭代器，客户端只能使用迭代器来遍历集合
	