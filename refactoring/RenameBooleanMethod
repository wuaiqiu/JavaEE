							Rename boolean method
							
							
1.Rename boolean method【重命名布尔方法】

	如果有Boolean类型参数，则为了简化外部调用带来的困难，一般会使用重命名方法来简
	
化调用带来的困难，当然，也可以通过重载来弱化boolean变量在使用中带来的不变


==============================================================================

	实例：
	
	public class BankAccount{
        public void CreateAccount( Object customer,boolean withChecking, boolean withSavings){
            // do work
        }
    }
	
-------------------解决方案----------------------------------------------------

	public class BankAccount2{
        public void CreateAccountWithChecking(Object customer){
            CreateAccount(customer, true, false);
        }

        public void CreateAccountWithCheckingAndSavings(Object customer){
            CreateAccount(customer, true, true);
        }

        private void CreateAccount(Object customer, boolean withChecking, boolean withSavings){
            // do work
        }
    }
	
	
	
	
	
2.Replace conditional with Polymorphism【用多态取代条件语句】


	上面其实也提到了策略模式替换多条件，其实是类似的。如果对java的单双派机制
	
=================================================================================	

	public class Day_31 {


		public static void main(String[] args) {

			Day_31 day_31 = new Day_31();

			Parent parent = new Parent();
			Son son = new Son();
			Daughter daughter = new Daughter();

			day_31.invokeSay(parent);
			day_31.invokeSay(son);
			day_31.invokeSay(daughter);

			System.out.println("华丽的分割线");
			//使用动态方式
			day_31.invokeSay2(parent);
			day_31.invokeSay2(son);
			day_31.invokeSay2(daughter);
			//考虑重载解决 -->又涉及到单分派-->通过使用访问者模式来解决
		}


		public void invokeSay(Object parent) {

			if (parent instanceof Son) {
				((Son) parent).say();
			} else if (parent instanceof Daughter) {

				((Daughter) parent).say();
			} else {
				((Parent)parent).say();
			}
		}
   
		public void invokeSay2(Parent parent) {

            parent.say();
		}


	}

	class Parent {

		public void say() {
			System.out.println("parent say");
			}
	}

	class Son extends Parent {

		public void say() {

			System.out.println("Son say");
		}
	}

	class Daughter extends Parent {

		public void say() {

			System.out.println("Daughter say");
    }
}