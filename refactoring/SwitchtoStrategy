						Switch to Strategy
						
						
1.Switch to Strategy【重构条件语句为策略模式】

	很多时候，要完成目标的方式不是只有一种，当我们需要使用不同的条件，来获取不同的结果的时候，
	
我们可以使用策略模式，这样，不会因为新增加一个条件，而去修改判断逻辑

	
================================================================================

	实例：
	
		public class ClientCode {
			public int CalculateShipping() {
				ShippingInfo shippingInfo = new ShippingInfo();
				return shippingInfo.CalculateShippingAmount(State.Alaska);
			}
		}

		public enum State {
			Alaska,
			NewYork,
			Florida;
		}

		public class ShippingInfo {
			public int CalculateShippingAmount(State shipToState) {

            if (shipToState == State.Alaska) {

                return GetAlaskaShippingAmount();
            } else if (shipToState == State.NewYork) {

                return GetNewYorkShippingAmount();
            } else if (shipToState == State.Florida) {

                return GetFloridaShippingAmount();
            } else
                return 0;
			}
		}

		private int GetAlaskaShippingAmount() {
			return 15;
		}

		private int GetNewYorkShippingAmount() {
			return 10;
		}

		private int GetFloridaShippingAmount() {
			return 3;
		}

=====================================================================================		
		
		分析：如果判断条件足够简单，上述做法，其实是可以容忍的，但是，如果Getxx方法变
		
的足够复杂的时候，考虑到单一责任原则，一个类的变化，有且只有一个原因引起，这样，每个

判断条件方法发生变化，类都必须做出修改，这样就不合适了。而且使用类封装，可以更好的实现复用。

-----------------------------------解决方案--------------------------------------

	static class ShippingInfo1{

     //模拟一个工厂
    private static Map<State,CalculateShippingAmountStrategy>strategyFactory=
			new HashMap<State, CalculateShippingAmountStrategy>();

        static {
            strategyFactory.put(State.Alaska,new GetAlaskaShippingAmount());
            strategyFactory.put(State.NewYork,new GetNewYorkShippingAmount());
            strategyFactory.put(State.Florida,new GetFloridaShippingAmount());
		}

        public int CalculateShippingAmount(State shipToState) {

            return strategyFactory.get(shipToState).calc();

			}

	}

    
	interface CalculateShippingAmountStrategy{

			public int calc();
    }

   static class GetAlaskaShippingAmount implements CalculateShippingAmountStrategy{

			public int calc(){

				return 15;
			}

    }
    
	static class GetNewYorkShippingAmount implements CalculateShippingAmountStrategy{

			public int calc(){

				return 10;
			}

    }
    
	static  class GetFloridaShippingAmount implements CalculateShippingAmountStrategy{

			public int calc(){

				return 3;
			}

    }