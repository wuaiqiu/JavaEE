								
								
					
1.重载

	方法的重载：Java中方法的重载是在一个类中发生进行的。当有多个方法具有相同的名字、不同的参数列表时，
	
便产生了方法的重载，此时方法的返回类型与修饰符可相同与不同均无关系。参数列表的不同包括

【参数的类型】，【参数的个数】，【参数的顺序】这三者之中至少有一项不同。当调用这些重载的方法时根据

参数列表的不同来自动匹配方法，这也体现了JAVA的多态性。

	
				public class Person{  
  
					public void say(){  
  
				}  
  
			private void say(String name,int age){  
  
				System.out.println("方法的重载1");  
  
				}  
  
			public void say(int age,String name){  
  
				System.out.println("方法的重载2");  
  
				}  
  
			public String say(int age,String name,String sex){  
  
				System.out.println("方法的重载3");  
  
					return name;  
  
				}  
  
			}  
			
			
			
2.重写

		方法的重写：JAVA中方法的重写时发生在子类继承父类的方式产生的。当子类继承父类的方法时相对
		
父类的方法作一定的修改，这时就用到了方法的重写。在子类中进行方法的重写时，要求子类中重写的方法的

访问【修饰符（可以是父类的子类）】，【返回类型（可以是父类的子类）】，【方法名】，以及【参数列表】

必须与父类的相同，否则编译将出错。

				public class Person{  
  
					public void say(String name,int age){  
  
						System.out.println("方法的重写");  
  
					}    
  
				}  
  
				public class Student extends Person{  
  
					public void say(int age,String name){  
  
						super.say(name, age);  
  
						System.out.println("测试方法的重写");  
  
				}  
  
				} 



3.重构

		重写算是重构的一部分，但重构还包括对程序结构的优化。
			