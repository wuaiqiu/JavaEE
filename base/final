									final
									

1.简介

	
	根据程序上下文环境，Java关键字final有“这是无法改变的”或者“终态的”含义，它可以修饰非抽象类、
	
非抽象类成员方法和变量。
       
	   (1).final类不能被继承，没有子类，final类中的方法默认是final的。
       
	   (2).final方法不能被子类的方法覆盖，但可以被继承。
       
	   (3).final成员变量表示常量，只能被赋值一次，赋值后值不再改变。
       
	   (4).final不能用于修饰构造方法。
        
		(注意：父类的private成员方法是不能被子类方法覆盖的，因此private类型的方法默认是final类型的。)
		

2.final类

	
	final类不能被继承，因此final类的成员方法没有机会被覆盖，默认都是final的。在设计类时候，
	
如果这个类不需要有子类，类的实现细节不允许改变，并且确信这个类不会载被扩展，那么就设计为final类。



3.final方法


	 使用final方法的原因有二：
        
		第一、把方法锁定，防止任何继承类修改它的意义和实现。
        
		第二、高效。编译器在遇到调用final方法时候会转入内嵌机制，大大提高执行效率。

		
	
4.final变量（常量）

	　
	(1)如果final修饰的是静态变量，只能在静态初始化块中指定初始值或者声明该类变量时指定初始值。
		
		只能在一个地方指定初始值
		
		=====================================
		static final int c=20;//合理
		
		static final int c;
		c=20;   //不合理
		
		static final int c;
		static{
			c=20;//合理
		}
		=====================================
　　  
	(2)如果final修饰的是成员变量，可以在非静态初始化块、声明该变量或者构造器中执行初始值。
	
		只能在一个地方指定初始值
		
		=============================
		static final int c;
		public test(int c){
			this.c=c;//合理
		}
		===============================
	  
	
	(3)如果final修饰的是局部变量，必须由程序员显示初始化。因此使用final修饰局部变量时，
	  
	  即可以在定义时指定默认值（后面的代码不能对变量再赋值），也可以不指定默认值，
	  
	  而在后面的代码中对final变量赋初值（仅一次）。
	  
	  
	(4)如果final修饰的是引用类型变量，它仅仅保存的是一个引用，final保证的是这个引用类型的变量所
	  
	  引用的地址不会变。即一直引用同一个对象，但是这个对象的值可以改变。
		
		====================================
		
		final  Person ps=new Person();
		ps.age=10;//合理
		
		====================================
		
5.final参数
        
		当函数参数为final类型时，你可以读取使用该参数，但是无法改变该参数的值。
	  
		=====================================
		public void f1(final int i) { 
                //i++;    //i是final类型的,值不允许改变的. 
                System.out.print(i); 
        } 
	
		=============================================
		
	