									static
					
	
	
1.static变量

		按照是否静态的对类成员变量进行分类可分两种：一种是被static修饰的变量，叫静态变量或类变量；
	
另一种是没有被static修饰的变量，叫实例变量。两者的区别是：

		对于静态变量在内存中只有一个拷贝（节省内存），JVM只为静态分配一次内存，在加载类的过程中完成
		
静态变量的内存分配，可用类名直接访问（方便），当然也可以通过对象来访问（但是这是不推荐的）。

		======================
		
		Person.age;//合理
		new Person().age;//不建议
		
		========================
        
		对于实例变量，没创建一个实例，就会为实例变量分配一次内存，实例变量可以在内存中有多个拷贝，互
		
不影响（灵活）。



2.static方法

		静态方法可以直接通过类名调用，任何的实例也都可以调用，但静态方法中不能用this和super关键字，
		
不能直接访问所属类的实例变量和实例方法(就是不带static的成员变量和成员成员方法)，只能访问所属类的静态

成员变量和成员方法。因为static方法独立于任何实例



3.static类

         通常一个普通类不允许声明为静态的，只有一个内部类才可以。这时这个声明为静态的内部类可以直
		 
接作为一个普通类来使用，而不需实例一个外部类。

===============================================

class OuterCls {

    public static class InnerCls {
       InnerCls() {
           System.out.println("InnerCls");
       }
    }
}
 
===================================================



4.与final一起使用

        static final用来修饰成员变量和成员方法，可简单理解为“全局常量”！
        对于变量，表示一旦给值就不可修改，并且通过类名可以访问。
        对于方法，表示不可覆盖，并且可以通过类名直接访问。