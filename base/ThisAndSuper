					this and super
					
		
1.this
	
	
	(1).表示对当前对象的引用！
	
		 public ThisTest increment(){
				
				return this;		//返回的是当前的对象，该对象属于（ThisTest）
		
		}
		
		
		
	(2).表示用类的成员变量
	
		private int i=0;
 
		ThisTest(int i){
       
			this.i=i+1;//此时this表示引用成员变量ｉ，而非函数参数ｉ
	  
	  }
	  
	  
	(3).用于在构造方法中引用满足指定参数类型的构造器（其实也就是构造方法）。但是这里必须非常注意：
	
	只能引用一个构造方法且必须位于第一行！
	
			//第一个构造器一个String型形参
			ThisTest(String s){
				
				System.out.println("String constructor:  "+s);
			
			}
			
			
			// 第二个构造器：有一个int型形参和一个String型形参
			ThisTest(int i,String s){
				
				this(s);//this调用第一个构造器，位于第一行
				
			}
			
			
	(4).this不能用在static方法中
	


	
	
2.super



	(1)子类的构造函数如果要引用super的话，必须把super放在函数的首位,只能引用一个构造方法
	
			class father{
			
				public father(){
					System.out.println("this is father");
				}
			
			}

			class son extends father{
			
					public son(){
						super();	//放在行首
						System.out.println("this is son");
					
					}
			}
		
		
	
	(2).用super来调用超类中的与子类同名的成员变量或方法
	
			class father{
				
				public void age(){
				
					System.out.println("this is father");
					
				}
			
			}
		
		
			class son extends father{
			
				public void age(){
					
					System.out.println("this is son");
				
				}
				
				
				public void test(){
				
					this.age(); 	//this is son
					super.age();	//this is father
				
				}
			
			}
			
			
	(3).调用父类不同的构造函数
	
			public class father{
				
				public father(){
				
					System.out.println("this is 0");
					
				}
				
				
				public father(int a){
				
					System.out.println("this is 1");
				
				}
				
				public father(int a,int b){
				
					System.out.println("this is 2");
					
				}
			
			}
			
			
			
			class son{
				
					public son(){
						
						super();  //调用father()构造函数
						super(1); //调用father(int a)构造函数
						super(1,2);//调用father(int a,int b)构造函数
					
					}
					
			}
			
			
			
	(4).this不能用在static方法中
		